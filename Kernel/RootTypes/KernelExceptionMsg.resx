<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema
    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CantReadParameter" xml:space="preserve">
    <value>There was a problem trying to read the value of '{0}' used by '{1}'.</value>
  </data>
  <data name="CantWriteParameter" xml:space="preserve">
    <value>There was a problem trying to write the value of '{0}' used by '{1}'.</value>
  </data>
  <data name="ListIndexOutOfRange" xml:space="preserve">
    <value>Index {0} is out of the bounds of the list.</value>
  </data>
  <data name="ListKeyNotFound" xml:space="preserve">
    <value>An item with key '{0}' was not found in the list.</value>
  </data>
  <data name="ConstructorNotDefined" xml:space="preserve">
    <value>Type {0} has not defined a default constructor. This can be a programming issue or a metadata definition problem.</value>
  </data>
  <data name="MethodExecutionFails" xml:space="preserve">
    <value>There was a problem trying to execute method {0} using reflection.</value>
  </data>
  <data name="MethodNotFound" xml:space="preserve">
    <value>Type {0} has not defined the method {1}. This can be a programming issue or a metadata definition problem.</value>
  </data>
  <data name="ObjectPropertyNotFound" xml:space="preserve">
    <value>Type {1} has not defined a property with name '{0}'. This can be a programming issue or a metadata definition problem.</value>
  </data>
  <data name="ParseMethodNotDefined" xml:space="preserve">
    <value>Type {0} has not defined a static Parse(int) method, necessary to create instances of it. This can be a programming issue or a metadata definition problem.</value>
  </data>
  <data name="TypeNotDefined" xml:space="preserve">
    <value>Assembly doesn't have the type '{0}'. It may be a programming or metadata inconsistency.</value>
  </data>
  <data name="AssertFails" xml:space="preserve">
    <value>Assertion fails inside {0}: \n{1}</value>
  </data>
  <data name="ParameterNotExists" xml:space="preserve">
    <value>There is not defined a system configuration parameter with name '{0}' for type '{1}'.</value>
  </data>
  <data name="ConditionalOptionNotDefined" xml:space="preserve">
    <value>Program execution reached a SWITCH-CASE condition that is not defined inside the code (value {0}).</value>
  </data>
  <data name="InvalidLicense" xml:space="preserve">
    <value>Empiria Framework license is not valid.\n\nWARNING: This computer program is protected by copyright law and international treaties. Unauthorized reproduction or distribution of this program, or any portion of it, may result in server civil and criminal penalties.\n\nIf you are not sure about the authenticity of this program or if you have comments or any questions, please contact us at www.ontica.org.</value>
  </data>
  <data name="CantReadExecutionServerProperty" xml:space="preserve">
    <value>There was a problem reading loading system's configuration data.</value>
  </data>
  <data name="XmlConfigurationFileNotExists" xml:space="preserve">
    <value>Xml file '{0}' with system's configuration data not exists.</value>
  </data>
  <data name="NotImplemented" xml:space="preserve">
    <value>Method {0} is not implemented.</value>
  </data>
  <data name="ConstructorExecutionFails" xml:space="preserve">
    <value>There was a problem executing type's {0} constructor. It may be a code or data initialization issue.</value>
  </data>
  <data name="InvalidTypeName" xml:space="preserve">
    <value>Cannot read a configuration parameter for type {1}: Type's namespace was not recognized.</value>
  </data>
  <data name="ValidTypeNotFoundInStackTrace" xml:space="preserve">
    <value>There is not a recognizable type name in the stack trace, so it's not possible to read any configuration data.\n\nStack:\n{0}</value>
  </data>
  <data name="AssertNoReachThisCode" xml:space="preserve">
    <value>PROGRAMMING ERROR: The program reached an invalid code flow statement. Probably it has a loop, if or switch that miss an exit condition or there are data with unexpected values. Please report this incident immediately to the system administrator or send us a message to support @ontica.org.</value>
  </data>
  <data name="ListKeyAlreadyExists" xml:space="preserve">
    <value>The list already contains an item with key '{0}'.</value>
  </data>
  <data name="JsonConverterForTypeAlreadyExists" xml:space="preserve">
    <value>JsonConverterForTypeAlreadyExists</value>
  </data>
  <data name="JsonConverterForTypeNotFound" xml:space="preserve">
    <value>JsonConverterForTypeNotFound</value>
  </data>
  <data name="JsonPathItemNotFound" xml:space="preserve">
    <value>The Json object doesn't has the item '{1}' over the path '{0}'.</value>
  </data>
  <data name="JsonSlicePathNotFound" xml:space="preserve">
    <value>Json slicing operation failed because there's not a Json item in the path '{}'. </value>
  </data>
  <data name="NotStarted" xml:space="preserve">
    <value>Execution server was not started using a call to the static method ExecutionServer.Start().</value>
  </data>
  <data name="JsonListTypeConvertionFails" xml:space="preserve">
    <value>There was a problem trying to convert the items of the list '{0}' to type {1}.</value>
  </data>
  <data name="JsonValueTypeConvertionFails" xml:space="preserve">
    <value>There was a problem trying to convert the value '{1}' of type {2} to type {3} for the Json path '{0}'.</value>
  </data>
</root>